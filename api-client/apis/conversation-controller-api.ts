/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseConversationResponse } from '../models';
// @ts-ignore
import type { ApiResponseListConversationResponse } from '../models';
// @ts-ignore
import type { ConversationRequest } from '../models';
/**
 * ConversationControllerApi - axios parameter creator
 * @export
 */
export const ConversationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API dùng để tạo mới một conversation nếu chưa tồn tại, hoặc lấy ra conversation đã tồn tại
         * @summary Create or retrieve a conversation
         * @param {ConversationRequest} conversationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversation: async (conversationRequest: ConversationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationRequest' is not null or undefined
            assertParamExists('createConversation', 'conversationRequest', conversationRequest)
            const localVarPath = `/v1/private/conversations/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy danh sách các cuộc trò chuyện của người dùng hiện tại
         * @summary Get conversations of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myConversations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/private/conversations/my-conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationControllerApi - functional programming interface
 * @export
 */
export const ConversationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * API dùng để tạo mới một conversation nếu chưa tồn tại, hoặc lấy ra conversation đã tồn tại
         * @summary Create or retrieve a conversation
         * @param {ConversationRequest} conversationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConversation(conversationRequest: ConversationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseConversationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(conversationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationControllerApi.createConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lấy danh sách các cuộc trò chuyện của người dùng hiện tại
         * @summary Get conversations of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myConversations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListConversationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myConversations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationControllerApi.myConversations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConversationControllerApi - factory interface
 * @export
 */
export const ConversationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversationControllerApiFp(configuration)
    return {
        /**
         * API dùng để tạo mới một conversation nếu chưa tồn tại, hoặc lấy ra conversation đã tồn tại
         * @summary Create or retrieve a conversation
         * @param {ConversationControllerApiCreateConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversation(requestParameters: ConversationControllerApiCreateConversationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseConversationResponse> {
            return localVarFp.createConversation(requestParameters.conversationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy danh sách các cuộc trò chuyện của người dùng hiện tại
         * @summary Get conversations of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myConversations(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListConversationResponse> {
            return localVarFp.myConversations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConversation operation in ConversationControllerApi.
 * @export
 * @interface ConversationControllerApiCreateConversationRequest
 */
export interface ConversationControllerApiCreateConversationRequest {
    /**
     * 
     * @type {ConversationRequest}
     * @memberof ConversationControllerApiCreateConversation
     */
    readonly conversationRequest: ConversationRequest
}

/**
 * ConversationControllerApi - object-oriented interface
 * @export
 * @class ConversationControllerApi
 * @extends {BaseAPI}
 */
export class ConversationControllerApi extends BaseAPI {
    /**
     * API dùng để tạo mới một conversation nếu chưa tồn tại, hoặc lấy ra conversation đã tồn tại
     * @summary Create or retrieve a conversation
     * @param {ConversationControllerApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public createConversation(requestParameters: ConversationControllerApiCreateConversationRequest, options?: RawAxiosRequestConfig) {
        return ConversationControllerApiFp(this.configuration).createConversation(requestParameters.conversationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy danh sách các cuộc trò chuyện của người dùng hiện tại
     * @summary Get conversations of current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public myConversations(options?: RawAxiosRequestConfig) {
        return ConversationControllerApiFp(this.configuration).myConversations(options).then((request) => request(this.axios, this.basePath));
    }
}

