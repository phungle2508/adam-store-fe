/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseProductVariantResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { VariantUpdateRequest } from '../models';
/**
 * ProductVariantControllerApi - axios parameter creator
 * @export
 */
export const ProductVariantControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API để xóa ProductVariant
         * @summary Delete product variant
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete5', 'id', id)
            const localVarPath = `/v1/admin/product-variants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API để tìm kiếm Product-Variant theo product, color, size
         * @summary Fetch product variant by product, color, size
         * @param {number} productId 
         * @param {number} colorId 
         * @param {number} sizeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByProductAndColorAndSize: async (productId: number, colorId: number, sizeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('findByProductAndColorAndSize', 'productId', productId)
            // verify required parameter 'colorId' is not null or undefined
            assertParamExists('findByProductAndColorAndSize', 'colorId', colorId)
            // verify required parameter 'sizeId' is not null or undefined
            assertParamExists('findByProductAndColorAndSize', 'sizeId', sizeId)
            const localVarPath = `/v1/private/product-variants/{productId}/{colorId}/{sizeId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"colorId"}}`, encodeURIComponent(String(colorId)))
                .replace(`{${"sizeId"}}`, encodeURIComponent(String(sizeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API để khôi phục ProductVariant
         * @summary Restore product variant
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restore3', 'id', id)
            const localVarPath = `/v1/admin/product-variants/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API để cập nhật giá và số lượng cho ProductVariant
         * @summary Update price and quantity for a product variant
         * @param {number} id 
         * @param {VariantUpdateRequest} variantUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePriceAndQuantity: async (id: number, variantUpdateRequest: VariantUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePriceAndQuantity', 'id', id)
            // verify required parameter 'variantUpdateRequest' is not null or undefined
            assertParamExists('updatePriceAndQuantity', 'variantUpdateRequest', variantUpdateRequest)
            const localVarPath = `/v1/admin/product-variants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variantUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductVariantControllerApi - functional programming interface
 * @export
 */
export const ProductVariantControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductVariantControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * API để xóa ProductVariant
         * @summary Delete product variant
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete5(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete5(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductVariantControllerApi.delete5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API để tìm kiếm Product-Variant theo product, color, size
         * @summary Fetch product variant by product, color, size
         * @param {number} productId 
         * @param {number} colorId 
         * @param {number} sizeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findByProductAndColorAndSize(productId: number, colorId: number, sizeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductVariantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findByProductAndColorAndSize(productId, colorId, sizeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductVariantControllerApi.findByProductAndColorAndSize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API để khôi phục ProductVariant
         * @summary Restore product variant
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restore3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductVariantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restore3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductVariantControllerApi.restore3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API để cập nhật giá và số lượng cho ProductVariant
         * @summary Update price and quantity for a product variant
         * @param {number} id 
         * @param {VariantUpdateRequest} variantUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePriceAndQuantity(id: number, variantUpdateRequest: VariantUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductVariantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePriceAndQuantity(id, variantUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductVariantControllerApi.updatePriceAndQuantity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductVariantControllerApi - factory interface
 * @export
 */
export const ProductVariantControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductVariantControllerApiFp(configuration)
    return {
        /**
         * API để xóa ProductVariant
         * @summary Delete product variant
         * @param {ProductVariantControllerApiDelete5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5(requestParameters: ProductVariantControllerApiDelete5Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete5(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API để tìm kiếm Product-Variant theo product, color, size
         * @summary Fetch product variant by product, color, size
         * @param {ProductVariantControllerApiFindByProductAndColorAndSizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByProductAndColorAndSize(requestParameters: ProductVariantControllerApiFindByProductAndColorAndSizeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductVariantResponse> {
            return localVarFp.findByProductAndColorAndSize(requestParameters.productId, requestParameters.colorId, requestParameters.sizeId, options).then((request) => request(axios, basePath));
        },
        /**
         * API để khôi phục ProductVariant
         * @summary Restore product variant
         * @param {ProductVariantControllerApiRestore3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore3(requestParameters: ProductVariantControllerApiRestore3Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductVariantResponse> {
            return localVarFp.restore3(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API để cập nhật giá và số lượng cho ProductVariant
         * @summary Update price and quantity for a product variant
         * @param {ProductVariantControllerApiUpdatePriceAndQuantityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePriceAndQuantity(requestParameters: ProductVariantControllerApiUpdatePriceAndQuantityRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductVariantResponse> {
            return localVarFp.updatePriceAndQuantity(requestParameters.id, requestParameters.variantUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delete5 operation in ProductVariantControllerApi.
 * @export
 * @interface ProductVariantControllerApiDelete5Request
 */
export interface ProductVariantControllerApiDelete5Request {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantControllerApiDelete5
     */
    readonly id: number
}

/**
 * Request parameters for findByProductAndColorAndSize operation in ProductVariantControllerApi.
 * @export
 * @interface ProductVariantControllerApiFindByProductAndColorAndSizeRequest
 */
export interface ProductVariantControllerApiFindByProductAndColorAndSizeRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantControllerApiFindByProductAndColorAndSize
     */
    readonly productId: number

    /**
     * 
     * @type {number}
     * @memberof ProductVariantControllerApiFindByProductAndColorAndSize
     */
    readonly colorId: number

    /**
     * 
     * @type {number}
     * @memberof ProductVariantControllerApiFindByProductAndColorAndSize
     */
    readonly sizeId: number
}

/**
 * Request parameters for restore3 operation in ProductVariantControllerApi.
 * @export
 * @interface ProductVariantControllerApiRestore3Request
 */
export interface ProductVariantControllerApiRestore3Request {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantControllerApiRestore3
     */
    readonly id: number
}

/**
 * Request parameters for updatePriceAndQuantity operation in ProductVariantControllerApi.
 * @export
 * @interface ProductVariantControllerApiUpdatePriceAndQuantityRequest
 */
export interface ProductVariantControllerApiUpdatePriceAndQuantityRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantControllerApiUpdatePriceAndQuantity
     */
    readonly id: number

    /**
     * 
     * @type {VariantUpdateRequest}
     * @memberof ProductVariantControllerApiUpdatePriceAndQuantity
     */
    readonly variantUpdateRequest: VariantUpdateRequest
}

/**
 * ProductVariantControllerApi - object-oriented interface
 * @export
 * @class ProductVariantControllerApi
 * @extends {BaseAPI}
 */
export class ProductVariantControllerApi extends BaseAPI {
    /**
     * API để xóa ProductVariant
     * @summary Delete product variant
     * @param {ProductVariantControllerApiDelete5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantControllerApi
     */
    public delete5(requestParameters: ProductVariantControllerApiDelete5Request, options?: RawAxiosRequestConfig) {
        return ProductVariantControllerApiFp(this.configuration).delete5(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API để tìm kiếm Product-Variant theo product, color, size
     * @summary Fetch product variant by product, color, size
     * @param {ProductVariantControllerApiFindByProductAndColorAndSizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantControllerApi
     */
    public findByProductAndColorAndSize(requestParameters: ProductVariantControllerApiFindByProductAndColorAndSizeRequest, options?: RawAxiosRequestConfig) {
        return ProductVariantControllerApiFp(this.configuration).findByProductAndColorAndSize(requestParameters.productId, requestParameters.colorId, requestParameters.sizeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API để khôi phục ProductVariant
     * @summary Restore product variant
     * @param {ProductVariantControllerApiRestore3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantControllerApi
     */
    public restore3(requestParameters: ProductVariantControllerApiRestore3Request, options?: RawAxiosRequestConfig) {
        return ProductVariantControllerApiFp(this.configuration).restore3(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API để cập nhật giá và số lượng cho ProductVariant
     * @summary Update price and quantity for a product variant
     * @param {ProductVariantControllerApiUpdatePriceAndQuantityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantControllerApi
     */
    public updatePriceAndQuantity(requestParameters: ProductVariantControllerApiUpdatePriceAndQuantityRequest, options?: RawAxiosRequestConfig) {
        return ProductVariantControllerApiFp(this.configuration).updatePriceAndQuantity(requestParameters.id, requestParameters.variantUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

