/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponsePageResponseProductResponse } from '../models';
// @ts-ignore
import type { ApiResponsePageResponseProductVariantResponse } from '../models';
// @ts-ignore
import type { ApiResponsePageResponseReviewResponse } from '../models';
// @ts-ignore
import type { ApiResponseProductResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { ProductRequest } from '../models';
// @ts-ignore
import type { ProductUpdateRequest } from '../models';
/**
 * ProductControllerApi - axios parameter creator
 * @export
 */
export const ProductControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create6: async (productRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productRequest' is not null or undefined
            assertParamExists('create6', 'productRequest', productRequest)
            const localVarPath = `/v1/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft Delete Product
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete4', 'id', id)
            const localVarPath = `/v1/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này để lấy các Products (ACTIVE) cho user
         * @summary Fetch All Products For User
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll1: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/public/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này để lấy các Products (cả ACTIVE và INACTIVE) cho admin
         * @summary Fetch All Products For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllProductsForAdmin: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này để lấy chi tiết của sản phẩm theo Id
         * @summary Fetch Product Detail By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDetailById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchDetailById', 'id', id)
            const localVarPath = `/v1/public/products/{id}/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReviewsByProductId: async (productId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('fetchReviewsByProductId', 'productId', productId)
            const localVarPath = `/v1/public/products/{productId}/reviews`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để lấy tất ca Product-Variants (cả ACTIVE và INACTIVE) theo Product cho admin
         * @summary Fetch All product-variants by product for Admin
         * @param {number} productId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantsByProductIdForAdmin: async (productId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getVariantsByProductIdForAdmin', 'productId', productId)
            const localVarPath = `/v1/admin/products/{productId}/product-variants/admin`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore Product
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restore2', 'id', id)
            const localVarPath = `/v1/admin/products/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để search product, giá trị của search: field~value hoặc field>value hoặc field<value
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<string>} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProduct: async (page?: number, size?: number, sort?: Array<string>, search?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/public/products/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductUpdateRequest} productUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5: async (id: number, productUpdateRequest: ProductUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update5', 'id', id)
            // verify required parameter 'productUpdateRequest' is not null or undefined
            assertParamExists('update5', 'productUpdateRequest', productUpdateRequest)
            const localVarPath = `/v1/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductControllerApi - functional programming interface
 * @export
 */
export const ProductControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create6(productRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create6(productRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.create6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft Delete Product
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete4(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.delete4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này để lấy các Products (ACTIVE) cho user
         * @summary Fetch All Products For User
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll1(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.fetchAll1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này để lấy các Products (cả ACTIVE và INACTIVE) cho admin
         * @summary Fetch All Products For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAllProductsForAdmin(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAllProductsForAdmin(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.fetchAllProductsForAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này để lấy chi tiết của sản phẩm theo Id
         * @summary Fetch Product Detail By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDetailById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDetailById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.fetchDetailById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchReviewsByProductId(productId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReviewsByProductId(productId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.fetchReviewsByProductId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để lấy tất ca Product-Variants (cả ACTIVE và INACTIVE) theo Product cho admin
         * @summary Fetch All product-variants by product for Admin
         * @param {number} productId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariantsByProductIdForAdmin(productId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseProductVariantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariantsByProductIdForAdmin(productId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.getVariantsByProductIdForAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore Product
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restore2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restore2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.restore2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để search product, giá trị của search: field~value hoặc field>value hoặc field<value
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<string>} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProduct(page?: number, size?: number, sort?: Array<string>, search?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProduct(page, size, sort, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.searchProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductUpdateRequest} productUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update5(id: number, productUpdateRequest: ProductUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update5(id, productUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.update5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductControllerApi - factory interface
 * @export
 */
export const ProductControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ProductControllerApiCreate6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create6(requestParameters: ProductControllerApiCreate6Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductResponse> {
            return localVarFp.create6(requestParameters.productRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft Delete Product
         * @param {ProductControllerApiDelete4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4(requestParameters: ProductControllerApiDelete4Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete4(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này để lấy các Products (ACTIVE) cho user
         * @summary Fetch All Products For User
         * @param {ProductControllerApiFetchAll1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll1(requestParameters: ProductControllerApiFetchAll1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseProductResponse> {
            return localVarFp.fetchAll1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này để lấy các Products (cả ACTIVE và INACTIVE) cho admin
         * @summary Fetch All Products For Admin
         * @param {ProductControllerApiFetchAllProductsForAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllProductsForAdmin(requestParameters: ProductControllerApiFetchAllProductsForAdminRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseProductResponse> {
            return localVarFp.fetchAllProductsForAdmin(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này để lấy chi tiết của sản phẩm theo Id
         * @summary Fetch Product Detail By Id
         * @param {ProductControllerApiFetchDetailByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDetailById(requestParameters: ProductControllerApiFetchDetailByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductResponse> {
            return localVarFp.fetchDetailById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductControllerApiFetchReviewsByProductIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReviewsByProductId(requestParameters: ProductControllerApiFetchReviewsByProductIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseReviewResponse> {
            return localVarFp.fetchReviewsByProductId(requestParameters.productId, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để lấy tất ca Product-Variants (cả ACTIVE và INACTIVE) theo Product cho admin
         * @summary Fetch All product-variants by product for Admin
         * @param {ProductControllerApiGetVariantsByProductIdForAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantsByProductIdForAdmin(requestParameters: ProductControllerApiGetVariantsByProductIdForAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseProductVariantResponse> {
            return localVarFp.getVariantsByProductIdForAdmin(requestParameters.productId, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore Product
         * @param {ProductControllerApiRestore2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore2(requestParameters: ProductControllerApiRestore2Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductResponse> {
            return localVarFp.restore2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để search product, giá trị của search: field~value hoặc field>value hoặc field<value
         * @param {ProductControllerApiSearchProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProduct(requestParameters: ProductControllerApiSearchProductRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseProductResponse> {
            return localVarFp.searchProduct(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductControllerApiUpdate5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5(requestParameters: ProductControllerApiUpdate5Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProductResponse> {
            return localVarFp.update5(requestParameters.id, requestParameters.productUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create6 operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiCreate6Request
 */
export interface ProductControllerApiCreate6Request {
    /**
     * 
     * @type {ProductRequest}
     * @memberof ProductControllerApiCreate6
     */
    readonly productRequest: ProductRequest
}

/**
 * Request parameters for delete4 operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiDelete4Request
 */
export interface ProductControllerApiDelete4Request {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiDelete4
     */
    readonly id: number
}

/**
 * Request parameters for fetchAll1 operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiFetchAll1Request
 */
export interface ProductControllerApiFetchAll1Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProductControllerApiFetchAll1
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProductControllerApiFetchAll1
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProductControllerApiFetchAll1
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for fetchAllProductsForAdmin operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiFetchAllProductsForAdminRequest
 */
export interface ProductControllerApiFetchAllProductsForAdminRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProductControllerApiFetchAllProductsForAdmin
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProductControllerApiFetchAllProductsForAdmin
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProductControllerApiFetchAllProductsForAdmin
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for fetchDetailById operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiFetchDetailByIdRequest
 */
export interface ProductControllerApiFetchDetailByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiFetchDetailById
     */
    readonly id: number
}

/**
 * Request parameters for fetchReviewsByProductId operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiFetchReviewsByProductIdRequest
 */
export interface ProductControllerApiFetchReviewsByProductIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiFetchReviewsByProductId
     */
    readonly productId: number

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProductControllerApiFetchReviewsByProductId
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProductControllerApiFetchReviewsByProductId
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProductControllerApiFetchReviewsByProductId
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getVariantsByProductIdForAdmin operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiGetVariantsByProductIdForAdminRequest
 */
export interface ProductControllerApiGetVariantsByProductIdForAdminRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiGetVariantsByProductIdForAdmin
     */
    readonly productId: number

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProductControllerApiGetVariantsByProductIdForAdmin
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProductControllerApiGetVariantsByProductIdForAdmin
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProductControllerApiGetVariantsByProductIdForAdmin
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for restore2 operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiRestore2Request
 */
export interface ProductControllerApiRestore2Request {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiRestore2
     */
    readonly id: number
}

/**
 * Request parameters for searchProduct operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiSearchProductRequest
 */
export interface ProductControllerApiSearchProductRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProductControllerApiSearchProduct
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProductControllerApiSearchProduct
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProductControllerApiSearchProduct
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof ProductControllerApiSearchProduct
     */
    readonly search?: Array<string>
}

/**
 * Request parameters for update5 operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiUpdate5Request
 */
export interface ProductControllerApiUpdate5Request {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiUpdate5
     */
    readonly id: number

    /**
     * 
     * @type {ProductUpdateRequest}
     * @memberof ProductControllerApiUpdate5
     */
    readonly productUpdateRequest: ProductUpdateRequest
}

/**
 * ProductControllerApi - object-oriented interface
 * @export
 * @class ProductControllerApi
 * @extends {BaseAPI}
 */
export class ProductControllerApi extends BaseAPI {
    /**
     * 
     * @param {ProductControllerApiCreate6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public create6(requestParameters: ProductControllerApiCreate6Request, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).create6(requestParameters.productRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft Delete Product
     * @param {ProductControllerApiDelete4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public delete4(requestParameters: ProductControllerApiDelete4Request, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).delete4(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này để lấy các Products (ACTIVE) cho user
     * @summary Fetch All Products For User
     * @param {ProductControllerApiFetchAll1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public fetchAll1(requestParameters: ProductControllerApiFetchAll1Request = {}, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).fetchAll1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này để lấy các Products (cả ACTIVE và INACTIVE) cho admin
     * @summary Fetch All Products For Admin
     * @param {ProductControllerApiFetchAllProductsForAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public fetchAllProductsForAdmin(requestParameters: ProductControllerApiFetchAllProductsForAdminRequest = {}, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).fetchAllProductsForAdmin(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này để lấy chi tiết của sản phẩm theo Id
     * @summary Fetch Product Detail By Id
     * @param {ProductControllerApiFetchDetailByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public fetchDetailById(requestParameters: ProductControllerApiFetchDetailByIdRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).fetchDetailById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductControllerApiFetchReviewsByProductIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public fetchReviewsByProductId(requestParameters: ProductControllerApiFetchReviewsByProductIdRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).fetchReviewsByProductId(requestParameters.productId, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để lấy tất ca Product-Variants (cả ACTIVE và INACTIVE) theo Product cho admin
     * @summary Fetch All product-variants by product for Admin
     * @param {ProductControllerApiGetVariantsByProductIdForAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public getVariantsByProductIdForAdmin(requestParameters: ProductControllerApiGetVariantsByProductIdForAdminRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).getVariantsByProductIdForAdmin(requestParameters.productId, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore Product
     * @param {ProductControllerApiRestore2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public restore2(requestParameters: ProductControllerApiRestore2Request, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).restore2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để search product, giá trị của search: field~value hoặc field>value hoặc field<value
     * @param {ProductControllerApiSearchProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public searchProduct(requestParameters: ProductControllerApiSearchProductRequest = {}, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).searchProduct(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductControllerApiUpdate5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public update5(requestParameters: ProductControllerApiUpdate5Request, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).update5(requestParameters.id, requestParameters.productUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

