/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseOrderResponse } from '../models';
// @ts-ignore
import type { ApiResponsePageResponseOrderResponse } from '../models';
// @ts-ignore
import type { ApiResponseShippingFeeResponse } from '../models';
// @ts-ignore
import type { ApiResponseVNPayResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { OrderAddressRequest } from '../models';
// @ts-ignore
import type { OrderRequest } from '../models';
// @ts-ignore
import type { PaymentCallbackRequest } from '../models';
// @ts-ignore
import type { ShippingRequest } from '../models';
/**
 * OrderControllerApi - axios parameter creator
 * @export
 */
export const OrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Api này dùng để tính phí ship của đơn hàng
         * @summary Calculate Shipping Fee
         * @param {ShippingRequest} shippingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateShippingFee: async (shippingRequest: ShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingRequest' is not null or undefined
            assertParamExists('calculateShippingFee', 'shippingRequest', shippingRequest)
            const localVarPath = `/v1/private/shipping/calculate-fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Người dùng hủy đơn hàng nếu khi đang ở trạng thái PENDING hoặc PROCESSING
         * @summary Cancel Order
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: async (orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('cancelOrder', 'orderId', orderId)
            const localVarPath = `/v1/private/orders/{orderId}/cancel`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để tạo đơn hàng
         * @summary Create Order
         * @param {OrderRequest} orderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (orderRequest: OrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderRequest' is not null or undefined
            assertParamExists('create1', 'orderRequest', orderRequest)
            const localVarPath = `/v1/private/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Admin xóa đơn hàng
         * @summary Delete Order For Admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete7: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete7', 'id', id)
            const localVarPath = `/v1/admin/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để lấy tất cả đơn hàng
         * @summary Fetch Order For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll11: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để lấy chi tiết đơn hàng
         * @summary Fetch Order Detail By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDetailById1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchDetailById1', 'id', id)
            const localVarPath = `/v1/private/orders/{id}/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để thanh toán đơn hàng thông qua VNPAY
         * @summary Payment for Order
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pay: async (orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('pay', 'orderId', orderId)
            const localVarPath = `/v1/private/orders/{orderId}/vn-pay`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để xử lý sau khi thanh toán đơn hàng
         * @summary Payment CallBack for Order
         * @param {PaymentCallbackRequest} paymentCallbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payCallbackHandler: async (paymentCallbackRequest: PaymentCallbackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentCallbackRequest' is not null or undefined
            assertParamExists('payCallbackHandler', 'paymentCallbackRequest', paymentCallbackRequest)
            const localVarPath = `/v1/private/orders/vn-pay-callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCallbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để thanh toán lại đơn hàng(khi đang trong phần chờ thanh toán)
         * @summary Retry Payment for Order
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryPayment: async (orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('retryPayment', 'orderId', orderId)
            const localVarPath = `/v1/private/orders/{orderId}/retry-payment`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search Order cho User hiện tại hoặc Admin dựa vào token
         * @summary Search Order For Current User Or Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<string>} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrder: async (page?: number, size?: number, sort?: Array<string>, search?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/private/orders/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cập nhập đia chỉ cho đơn hàng ở trạng thái PENDING hoặc PROCESSING
         * @summary Update Address for Order
         * @param {number} orderId 
         * @param {OrderAddressRequest} orderAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (orderId: number, orderAddressRequest: OrderAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateAddress', 'orderId', orderId)
            // verify required parameter 'orderAddressRequest' is not null or undefined
            assertParamExists('updateAddress', 'orderAddressRequest', orderAddressRequest)
            const localVarPath = `/v1/private/orders/{orderId}/address`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderAddressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderControllerApi - functional programming interface
 * @export
 */
export const OrderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Api này dùng để tính phí ship của đơn hàng
         * @summary Calculate Shipping Fee
         * @param {ShippingRequest} shippingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateShippingFee(shippingRequest: ShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseShippingFeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateShippingFee(shippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.calculateShippingFee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Người dùng hủy đơn hàng nếu khi đang ở trạng thái PENDING hoặc PROCESSING
         * @summary Cancel Order
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(orderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrder(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.cancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để tạo đơn hàng
         * @summary Create Order
         * @param {OrderRequest} orderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(orderRequest: OrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(orderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.create1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Admin xóa đơn hàng
         * @summary Delete Order For Admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete7(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete7(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.delete7']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để lấy tất cả đơn hàng
         * @summary Fetch Order For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll11(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll11(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.fetchAll11']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để lấy chi tiết đơn hàng
         * @summary Fetch Order Detail By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDetailById1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDetailById1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.fetchDetailById1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để thanh toán đơn hàng thông qua VNPAY
         * @summary Payment for Order
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pay(orderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVNPayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pay(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.pay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để xử lý sau khi thanh toán đơn hàng
         * @summary Payment CallBack for Order
         * @param {PaymentCallbackRequest} paymentCallbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payCallbackHandler(paymentCallbackRequest: PaymentCallbackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payCallbackHandler(paymentCallbackRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.payCallbackHandler']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để thanh toán lại đơn hàng(khi đang trong phần chờ thanh toán)
         * @summary Retry Payment for Order
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryPayment(orderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVNPayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryPayment(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.retryPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search Order cho User hiện tại hoặc Admin dựa vào token
         * @summary Search Order For Current User Or Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<string>} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchOrder(page?: number, size?: number, sort?: Array<string>, search?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchOrder(page, size, sort, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.searchOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cập nhập đia chỉ cho đơn hàng ở trạng thái PENDING hoặc PROCESSING
         * @summary Update Address for Order
         * @param {number} orderId 
         * @param {OrderAddressRequest} orderAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(orderId: number, orderAddressRequest: OrderAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(orderId, orderAddressRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.updateAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderControllerApi - factory interface
 * @export
 */
export const OrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderControllerApiFp(configuration)
    return {
        /**
         * Api này dùng để tính phí ship của đơn hàng
         * @summary Calculate Shipping Fee
         * @param {OrderControllerApiCalculateShippingFeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateShippingFee(requestParameters: OrderControllerApiCalculateShippingFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseShippingFeeResponse> {
            return localVarFp.calculateShippingFee(requestParameters.shippingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Người dùng hủy đơn hàng nếu khi đang ở trạng thái PENDING hoặc PROCESSING
         * @summary Cancel Order
         * @param {OrderControllerApiCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(requestParameters: OrderControllerApiCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOrderResponse> {
            return localVarFp.cancelOrder(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để tạo đơn hàng
         * @summary Create Order
         * @param {OrderControllerApiCreate1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(requestParameters: OrderControllerApiCreate1Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOrderResponse> {
            return localVarFp.create1(requestParameters.orderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Admin xóa đơn hàng
         * @summary Delete Order For Admin
         * @param {OrderControllerApiDelete7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete7(requestParameters: OrderControllerApiDelete7Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete7(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để lấy tất cả đơn hàng
         * @summary Fetch Order For Admin
         * @param {OrderControllerApiFetchAll11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll11(requestParameters: OrderControllerApiFetchAll11Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseOrderResponse> {
            return localVarFp.fetchAll11(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để lấy chi tiết đơn hàng
         * @summary Fetch Order Detail By Id
         * @param {OrderControllerApiFetchDetailById1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDetailById1(requestParameters: OrderControllerApiFetchDetailById1Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOrderResponse> {
            return localVarFp.fetchDetailById1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để thanh toán đơn hàng thông qua VNPAY
         * @summary Payment for Order
         * @param {OrderControllerApiPayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pay(requestParameters: OrderControllerApiPayRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVNPayResponse> {
            return localVarFp.pay(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để xử lý sau khi thanh toán đơn hàng
         * @summary Payment CallBack for Order
         * @param {OrderControllerApiPayCallbackHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payCallbackHandler(requestParameters: OrderControllerApiPayCallbackHandlerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOrderResponse> {
            return localVarFp.payCallbackHandler(requestParameters.paymentCallbackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để thanh toán lại đơn hàng(khi đang trong phần chờ thanh toán)
         * @summary Retry Payment for Order
         * @param {OrderControllerApiRetryPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryPayment(requestParameters: OrderControllerApiRetryPaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVNPayResponse> {
            return localVarFp.retryPayment(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search Order cho User hiện tại hoặc Admin dựa vào token
         * @summary Search Order For Current User Or Admin
         * @param {OrderControllerApiSearchOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrder(requestParameters: OrderControllerApiSearchOrderRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseOrderResponse> {
            return localVarFp.searchOrder(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * Cập nhập đia chỉ cho đơn hàng ở trạng thái PENDING hoặc PROCESSING
         * @summary Update Address for Order
         * @param {OrderControllerApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(requestParameters: OrderControllerApiUpdateAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOrderResponse> {
            return localVarFp.updateAddress(requestParameters.orderId, requestParameters.orderAddressRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for calculateShippingFee operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiCalculateShippingFeeRequest
 */
export interface OrderControllerApiCalculateShippingFeeRequest {
    /**
     * 
     * @type {ShippingRequest}
     * @memberof OrderControllerApiCalculateShippingFee
     */
    readonly shippingRequest: ShippingRequest
}

/**
 * Request parameters for cancelOrder operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiCancelOrderRequest
 */
export interface OrderControllerApiCancelOrderRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderControllerApiCancelOrder
     */
    readonly orderId: number
}

/**
 * Request parameters for create1 operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiCreate1Request
 */
export interface OrderControllerApiCreate1Request {
    /**
     * 
     * @type {OrderRequest}
     * @memberof OrderControllerApiCreate1
     */
    readonly orderRequest: OrderRequest
}

/**
 * Request parameters for delete7 operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiDelete7Request
 */
export interface OrderControllerApiDelete7Request {
    /**
     * 
     * @type {number}
     * @memberof OrderControllerApiDelete7
     */
    readonly id: number
}

/**
 * Request parameters for fetchAll11 operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiFetchAll11Request
 */
export interface OrderControllerApiFetchAll11Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrderControllerApiFetchAll11
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrderControllerApiFetchAll11
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrderControllerApiFetchAll11
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for fetchDetailById1 operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiFetchDetailById1Request
 */
export interface OrderControllerApiFetchDetailById1Request {
    /**
     * 
     * @type {number}
     * @memberof OrderControllerApiFetchDetailById1
     */
    readonly id: number
}

/**
 * Request parameters for pay operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiPayRequest
 */
export interface OrderControllerApiPayRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderControllerApiPay
     */
    readonly orderId: number
}

/**
 * Request parameters for payCallbackHandler operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiPayCallbackHandlerRequest
 */
export interface OrderControllerApiPayCallbackHandlerRequest {
    /**
     * 
     * @type {PaymentCallbackRequest}
     * @memberof OrderControllerApiPayCallbackHandler
     */
    readonly paymentCallbackRequest: PaymentCallbackRequest
}

/**
 * Request parameters for retryPayment operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiRetryPaymentRequest
 */
export interface OrderControllerApiRetryPaymentRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderControllerApiRetryPayment
     */
    readonly orderId: number
}

/**
 * Request parameters for searchOrder operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiSearchOrderRequest
 */
export interface OrderControllerApiSearchOrderRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrderControllerApiSearchOrder
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrderControllerApiSearchOrder
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrderControllerApiSearchOrder
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof OrderControllerApiSearchOrder
     */
    readonly search?: Array<string>
}

/**
 * Request parameters for updateAddress operation in OrderControllerApi.
 * @export
 * @interface OrderControllerApiUpdateAddressRequest
 */
export interface OrderControllerApiUpdateAddressRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderControllerApiUpdateAddress
     */
    readonly orderId: number

    /**
     * 
     * @type {OrderAddressRequest}
     * @memberof OrderControllerApiUpdateAddress
     */
    readonly orderAddressRequest: OrderAddressRequest
}

/**
 * OrderControllerApi - object-oriented interface
 * @export
 * @class OrderControllerApi
 * @extends {BaseAPI}
 */
export class OrderControllerApi extends BaseAPI {
    /**
     * Api này dùng để tính phí ship của đơn hàng
     * @summary Calculate Shipping Fee
     * @param {OrderControllerApiCalculateShippingFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public calculateShippingFee(requestParameters: OrderControllerApiCalculateShippingFeeRequest, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).calculateShippingFee(requestParameters.shippingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Người dùng hủy đơn hàng nếu khi đang ở trạng thái PENDING hoặc PROCESSING
     * @summary Cancel Order
     * @param {OrderControllerApiCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public cancelOrder(requestParameters: OrderControllerApiCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).cancelOrder(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để tạo đơn hàng
     * @summary Create Order
     * @param {OrderControllerApiCreate1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public create1(requestParameters: OrderControllerApiCreate1Request, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).create1(requestParameters.orderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Admin xóa đơn hàng
     * @summary Delete Order For Admin
     * @param {OrderControllerApiDelete7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public delete7(requestParameters: OrderControllerApiDelete7Request, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).delete7(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để lấy tất cả đơn hàng
     * @summary Fetch Order For Admin
     * @param {OrderControllerApiFetchAll11Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public fetchAll11(requestParameters: OrderControllerApiFetchAll11Request = {}, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).fetchAll11(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để lấy chi tiết đơn hàng
     * @summary Fetch Order Detail By Id
     * @param {OrderControllerApiFetchDetailById1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public fetchDetailById1(requestParameters: OrderControllerApiFetchDetailById1Request, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).fetchDetailById1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để thanh toán đơn hàng thông qua VNPAY
     * @summary Payment for Order
     * @param {OrderControllerApiPayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public pay(requestParameters: OrderControllerApiPayRequest, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).pay(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để xử lý sau khi thanh toán đơn hàng
     * @summary Payment CallBack for Order
     * @param {OrderControllerApiPayCallbackHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public payCallbackHandler(requestParameters: OrderControllerApiPayCallbackHandlerRequest, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).payCallbackHandler(requestParameters.paymentCallbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để thanh toán lại đơn hàng(khi đang trong phần chờ thanh toán)
     * @summary Retry Payment for Order
     * @param {OrderControllerApiRetryPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public retryPayment(requestParameters: OrderControllerApiRetryPaymentRequest, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).retryPayment(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search Order cho User hiện tại hoặc Admin dựa vào token
     * @summary Search Order For Current User Or Admin
     * @param {OrderControllerApiSearchOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public searchOrder(requestParameters: OrderControllerApiSearchOrderRequest = {}, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).searchOrder(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cập nhập đia chỉ cho đơn hàng ở trạng thái PENDING hoặc PROCESSING
     * @summary Update Address for Order
     * @param {OrderControllerApiUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public updateAddress(requestParameters: OrderControllerApiUpdateAddressRequest, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).updateAddress(requestParameters.orderId, requestParameters.orderAddressRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

