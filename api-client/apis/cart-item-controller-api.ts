/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseCartItemResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { CartItemRequest } from '../models';
// @ts-ignore
import type { CartItemUpdateRequest } from '../models';
/**
 * CartItemControllerApi - axios parameter creator
 * @export
 */
export const CartItemControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API thêm sản phẩm vào giỏ hàng
         * @param {CartItemRequest} cartItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (cartItemRequest: CartItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartItemRequest' is not null or undefined
            assertParamExists('create2', 'cartItemRequest', cartItemRequest)
            const localVarPath = `/v1/private/cart-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete1', 'id', id)
            const localVarPath = `/v1/private/cart-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById6: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchById6', 'id', id)
            const localVarPath = `/v1/private/cart-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CartItemUpdateRequest} cartItemUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (id: number, cartItemUpdateRequest: CartItemUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update2', 'id', id)
            // verify required parameter 'cartItemUpdateRequest' is not null or undefined
            assertParamExists('update2', 'cartItemUpdateRequest', cartItemUpdateRequest)
            const localVarPath = `/v1/private/cart-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartItemUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartItemControllerApi - functional programming interface
 * @export
 */
export const CartItemControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartItemControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * API thêm sản phẩm vào giỏ hàng
         * @param {CartItemRequest} cartItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(cartItemRequest: CartItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCartItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create2(cartItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemControllerApi.create2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemControllerApi.delete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchById6(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCartItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchById6(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemControllerApi.fetchById6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CartItemUpdateRequest} cartItemUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(id: number, cartItemUpdateRequest: CartItemUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCartItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(id, cartItemUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemControllerApi.update2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartItemControllerApi - factory interface
 * @export
 */
export const CartItemControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartItemControllerApiFp(configuration)
    return {
        /**
         * API thêm sản phẩm vào giỏ hàng
         * @param {CartItemControllerApiCreate2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(requestParameters: CartItemControllerApiCreate2Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCartItemResponse> {
            return localVarFp.create2(requestParameters.cartItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CartItemControllerApiDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(requestParameters: CartItemControllerApiDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CartItemControllerApiFetchById6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById6(requestParameters: CartItemControllerApiFetchById6Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCartItemResponse> {
            return localVarFp.fetchById6(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CartItemControllerApiUpdate2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(requestParameters: CartItemControllerApiUpdate2Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCartItemResponse> {
            return localVarFp.update2(requestParameters.id, requestParameters.cartItemUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create2 operation in CartItemControllerApi.
 * @export
 * @interface CartItemControllerApiCreate2Request
 */
export interface CartItemControllerApiCreate2Request {
    /**
     * 
     * @type {CartItemRequest}
     * @memberof CartItemControllerApiCreate2
     */
    readonly cartItemRequest: CartItemRequest
}

/**
 * Request parameters for delete1 operation in CartItemControllerApi.
 * @export
 * @interface CartItemControllerApiDelete1Request
 */
export interface CartItemControllerApiDelete1Request {
    /**
     * 
     * @type {number}
     * @memberof CartItemControllerApiDelete1
     */
    readonly id: number
}

/**
 * Request parameters for fetchById6 operation in CartItemControllerApi.
 * @export
 * @interface CartItemControllerApiFetchById6Request
 */
export interface CartItemControllerApiFetchById6Request {
    /**
     * 
     * @type {number}
     * @memberof CartItemControllerApiFetchById6
     */
    readonly id: number
}

/**
 * Request parameters for update2 operation in CartItemControllerApi.
 * @export
 * @interface CartItemControllerApiUpdate2Request
 */
export interface CartItemControllerApiUpdate2Request {
    /**
     * 
     * @type {number}
     * @memberof CartItemControllerApiUpdate2
     */
    readonly id: number

    /**
     * 
     * @type {CartItemUpdateRequest}
     * @memberof CartItemControllerApiUpdate2
     */
    readonly cartItemUpdateRequest: CartItemUpdateRequest
}

/**
 * CartItemControllerApi - object-oriented interface
 * @export
 * @class CartItemControllerApi
 * @extends {BaseAPI}
 */
export class CartItemControllerApi extends BaseAPI {
    /**
     * API thêm sản phẩm vào giỏ hàng
     * @param {CartItemControllerApiCreate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemControllerApi
     */
    public create2(requestParameters: CartItemControllerApiCreate2Request, options?: RawAxiosRequestConfig) {
        return CartItemControllerApiFp(this.configuration).create2(requestParameters.cartItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CartItemControllerApiDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemControllerApi
     */
    public delete1(requestParameters: CartItemControllerApiDelete1Request, options?: RawAxiosRequestConfig) {
        return CartItemControllerApiFp(this.configuration).delete1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CartItemControllerApiFetchById6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemControllerApi
     */
    public fetchById6(requestParameters: CartItemControllerApiFetchById6Request, options?: RawAxiosRequestConfig) {
        return CartItemControllerApiFp(this.configuration).fetchById6(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CartItemControllerApiUpdate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemControllerApi
     */
    public update2(requestParameters: CartItemControllerApiUpdate2Request, options?: RawAxiosRequestConfig) {
        return CartItemControllerApiFp(this.configuration).update2(requestParameters.id, requestParameters.cartItemUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

