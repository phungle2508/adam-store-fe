/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponsePageResponsePaymentHistoryResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
/**
 * PaymentHistoryControllerApi - axios parameter creator
 * @export
 */
export const PaymentHistoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete6: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete6', 'id', id)
            const localVarPath = `/v1/admin/payment-histories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này dùng để tìm kiếm Payment-History
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {SearchPaymentHistoriesPaymentStatusEnum} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPaymentHistories: async (startDate: string, endDate: string, page?: number, size?: number, sort?: Array<string>, paymentStatus?: SearchPaymentHistoriesPaymentStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('searchPaymentHistories', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('searchPaymentHistories', 'endDate', endDate)
            const localVarPath = `/v1/admin/payment-histories/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentHistoryControllerApi - functional programming interface
 * @export
 */
export const PaymentHistoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentHistoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete6(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete6(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentHistoryControllerApi.delete6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này dùng để tìm kiếm Payment-History
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {SearchPaymentHistoriesPaymentStatusEnum} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPaymentHistories(startDate: string, endDate: string, page?: number, size?: number, sort?: Array<string>, paymentStatus?: SearchPaymentHistoriesPaymentStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponsePaymentHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPaymentHistories(startDate, endDate, page, size, sort, paymentStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentHistoryControllerApi.searchPaymentHistories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentHistoryControllerApi - factory interface
 * @export
 */
export const PaymentHistoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentHistoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {PaymentHistoryControllerApiDelete6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete6(requestParameters: PaymentHistoryControllerApiDelete6Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete6(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này dùng để tìm kiếm Payment-History
         * @param {PaymentHistoryControllerApiSearchPaymentHistoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPaymentHistories(requestParameters: PaymentHistoryControllerApiSearchPaymentHistoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponsePaymentHistoryResponse> {
            return localVarFp.searchPaymentHistories(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.paymentStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delete6 operation in PaymentHistoryControllerApi.
 * @export
 * @interface PaymentHistoryControllerApiDelete6Request
 */
export interface PaymentHistoryControllerApiDelete6Request {
    /**
     * 
     * @type {number}
     * @memberof PaymentHistoryControllerApiDelete6
     */
    readonly id: number
}

/**
 * Request parameters for searchPaymentHistories operation in PaymentHistoryControllerApi.
 * @export
 * @interface PaymentHistoryControllerApiSearchPaymentHistoriesRequest
 */
export interface PaymentHistoryControllerApiSearchPaymentHistoriesRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentHistoryControllerApiSearchPaymentHistories
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof PaymentHistoryControllerApiSearchPaymentHistories
     */
    readonly endDate: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof PaymentHistoryControllerApiSearchPaymentHistories
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof PaymentHistoryControllerApiSearchPaymentHistories
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PaymentHistoryControllerApiSearchPaymentHistories
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {'PAID' | 'PENDING' | 'REFUNDED' | 'CANCELED' | 'FAILED'}
     * @memberof PaymentHistoryControllerApiSearchPaymentHistories
     */
    readonly paymentStatus?: SearchPaymentHistoriesPaymentStatusEnum
}

/**
 * PaymentHistoryControllerApi - object-oriented interface
 * @export
 * @class PaymentHistoryControllerApi
 * @extends {BaseAPI}
 */
export class PaymentHistoryControllerApi extends BaseAPI {
    /**
     * 
     * @param {PaymentHistoryControllerApiDelete6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentHistoryControllerApi
     */
    public delete6(requestParameters: PaymentHistoryControllerApiDelete6Request, options?: RawAxiosRequestConfig) {
        return PaymentHistoryControllerApiFp(this.configuration).delete6(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này dùng để tìm kiếm Payment-History
     * @param {PaymentHistoryControllerApiSearchPaymentHistoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentHistoryControllerApi
     */
    public searchPaymentHistories(requestParameters: PaymentHistoryControllerApiSearchPaymentHistoriesRequest, options?: RawAxiosRequestConfig) {
        return PaymentHistoryControllerApiFp(this.configuration).searchPaymentHistories(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.paymentStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchPaymentHistoriesPaymentStatusEnum = {
    Paid: 'PAID',
    Pending: 'PENDING',
    Refunded: 'REFUNDED',
    Canceled: 'CANCELED',
    Failed: 'FAILED'
} as const;
export type SearchPaymentHistoriesPaymentStatusEnum = typeof SearchPaymentHistoriesPaymentStatusEnum[keyof typeof SearchPaymentHistoriesPaymentStatusEnum];
