/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponsePageResponseDistrictResponse } from '../models';
// @ts-ignore
import type { ApiResponsePageResponseProvinceResponse } from '../models';
// @ts-ignore
import type { ApiResponseProvinceResponse } from '../models';
/**
 * ProvinceControllerApi - axios parameter creator
 * @export
 */
export const ProvinceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll6: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/private/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchById3', 'id', id)
            const localVarPath = `/v1/private/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API dùng để lấy danh sách districts theo province
         * @param {number} provinceId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDistrictsByProvince: async (provinceId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provinceId' is not null or undefined
            assertParamExists('fetchDistrictsByProvince', 'provinceId', provinceId)
            const localVarPath = `/v1/private/provinces/{provinceId}/districts`
                .replace(`{${"provinceId"}}`, encodeURIComponent(String(provinceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvinceControllerApi - functional programming interface
 * @export
 */
export const ProvinceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvinceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll6(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseProvinceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll6(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceControllerApi.fetchAll6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchById3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProvinceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchById3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceControllerApi.fetchById3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API dùng để lấy danh sách districts theo province
         * @param {number} provinceId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDistrictsByProvince(provinceId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseDistrictResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDistrictsByProvince(provinceId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceControllerApi.fetchDistrictsByProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProvinceControllerApi - factory interface
 * @export
 */
export const ProvinceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvinceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ProvinceControllerApiFetchAll6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll6(requestParameters: ProvinceControllerApiFetchAll6Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseProvinceResponse> {
            return localVarFp.fetchAll6(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProvinceControllerApiFetchById3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById3(requestParameters: ProvinceControllerApiFetchById3Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProvinceResponse> {
            return localVarFp.fetchById3(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API dùng để lấy danh sách districts theo province
         * @param {ProvinceControllerApiFetchDistrictsByProvinceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDistrictsByProvince(requestParameters: ProvinceControllerApiFetchDistrictsByProvinceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseDistrictResponse> {
            return localVarFp.fetchDistrictsByProvince(requestParameters.provinceId, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fetchAll6 operation in ProvinceControllerApi.
 * @export
 * @interface ProvinceControllerApiFetchAll6Request
 */
export interface ProvinceControllerApiFetchAll6Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProvinceControllerApiFetchAll6
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProvinceControllerApiFetchAll6
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProvinceControllerApiFetchAll6
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for fetchById3 operation in ProvinceControllerApi.
 * @export
 * @interface ProvinceControllerApiFetchById3Request
 */
export interface ProvinceControllerApiFetchById3Request {
    /**
     * 
     * @type {number}
     * @memberof ProvinceControllerApiFetchById3
     */
    readonly id: number
}

/**
 * Request parameters for fetchDistrictsByProvince operation in ProvinceControllerApi.
 * @export
 * @interface ProvinceControllerApiFetchDistrictsByProvinceRequest
 */
export interface ProvinceControllerApiFetchDistrictsByProvinceRequest {
    /**
     * 
     * @type {number}
     * @memberof ProvinceControllerApiFetchDistrictsByProvince
     */
    readonly provinceId: number

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ProvinceControllerApiFetchDistrictsByProvince
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ProvinceControllerApiFetchDistrictsByProvince
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ProvinceControllerApiFetchDistrictsByProvince
     */
    readonly sort?: Array<string>
}

/**
 * ProvinceControllerApi - object-oriented interface
 * @export
 * @class ProvinceControllerApi
 * @extends {BaseAPI}
 */
export class ProvinceControllerApi extends BaseAPI {
    /**
     * 
     * @param {ProvinceControllerApiFetchAll6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceControllerApi
     */
    public fetchAll6(requestParameters: ProvinceControllerApiFetchAll6Request = {}, options?: RawAxiosRequestConfig) {
        return ProvinceControllerApiFp(this.configuration).fetchAll6(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProvinceControllerApiFetchById3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceControllerApi
     */
    public fetchById3(requestParameters: ProvinceControllerApiFetchById3Request, options?: RawAxiosRequestConfig) {
        return ProvinceControllerApiFp(this.configuration).fetchById3(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API dùng để lấy danh sách districts theo province
     * @param {ProvinceControllerApiFetchDistrictsByProvinceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceControllerApi
     */
    public fetchDistrictsByProvince(requestParameters: ProvinceControllerApiFetchDistrictsByProvinceRequest, options?: RawAxiosRequestConfig) {
        return ProvinceControllerApiFp(this.configuration).fetchDistrictsByProvince(requestParameters.provinceId, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}

