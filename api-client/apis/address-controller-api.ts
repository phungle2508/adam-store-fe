/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddressRequest } from '../models';
// @ts-ignore
import type { ApiResponseAddressResponse } from '../models';
// @ts-ignore
import type { ApiResponsePageResponseAddressResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
/**
 * AddressControllerApi - axios parameter creator
 * @export
 */
export const AddressControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Api dùng để tạo địa chỉ mới
         * @summary Create New Address
         * @param {AddressRequest} addressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3: async (addressRequest: AddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressRequest' is not null or undefined
            assertParamExists('create3', 'addressRequest', addressRequest)
            const localVarPath = `/v1/private/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API để Admin xóa mềm address
         * @summary Soft Delete Address
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete12: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete12', 'id', id)
            const localVarPath = `/v1/admin/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API này để lấy tất cả address bên trong hệ thống (page bắt đầu từ 0)
         * @summary Fetch All Addresses For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllForAdmin1: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById7: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchById7', 'id', id)
            const localVarPath = `/v1/private/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này cho phép user xóa địa chỉ của chính user đó trong giao diện người dùng
         * @summary Hide User Address
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideAddress: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('hideAddress', 'id', id)
            const localVarPath = `/v1/private/addresses/{id}/hide`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này để khôi phục Address
         * @summary Restore Address
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore6: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restore6', 'id', id)
            const localVarPath = `/v1/admin/addresses/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API để update địa chỉ
         * @param {number} id 
         * @param {AddressRequest} addressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (id: number, addressRequest: AddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update3', 'id', id)
            // verify required parameter 'addressRequest' is not null or undefined
            assertParamExists('update3', 'addressRequest', addressRequest)
            const localVarPath = `/v1/private/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressControllerApi - functional programming interface
 * @export
 */
export const AddressControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Api dùng để tạo địa chỉ mới
         * @summary Create New Address
         * @param {AddressRequest} addressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(addressRequest: AddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create3(addressRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.create3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API để Admin xóa mềm address
         * @summary Soft Delete Address
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete12(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete12(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.delete12']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API này để lấy tất cả address bên trong hệ thống (page bắt đầu từ 0)
         * @summary Fetch All Addresses For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAllForAdmin1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponseAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAllForAdmin1(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.fetchAllForAdmin1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchById7(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchById7(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.fetchById7']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này cho phép user xóa địa chỉ của chính user đó trong giao diện người dùng
         * @summary Hide User Address
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideAddress(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideAddress(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.hideAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này để khôi phục Address
         * @summary Restore Address
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restore6(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restore6(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.restore6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API để update địa chỉ
         * @param {number} id 
         * @param {AddressRequest} addressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(id: number, addressRequest: AddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update3(id, addressRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.update3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressControllerApi - factory interface
 * @export
 */
export const AddressControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressControllerApiFp(configuration)
    return {
        /**
         * Api dùng để tạo địa chỉ mới
         * @summary Create New Address
         * @param {AddressControllerApiCreate3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3(requestParameters: AddressControllerApiCreate3Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAddressResponse> {
            return localVarFp.create3(requestParameters.addressRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API để Admin xóa mềm address
         * @summary Soft Delete Address
         * @param {AddressControllerApiDelete12Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete12(requestParameters: AddressControllerApiDelete12Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete12(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API này để lấy tất cả address bên trong hệ thống (page bắt đầu từ 0)
         * @summary Fetch All Addresses For Admin
         * @param {AddressControllerApiFetchAllForAdmin1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllForAdmin1(requestParameters: AddressControllerApiFetchAllForAdmin1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponseAddressResponse> {
            return localVarFp.fetchAllForAdmin1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddressControllerApiFetchById7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById7(requestParameters: AddressControllerApiFetchById7Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAddressResponse> {
            return localVarFp.fetchById7(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này cho phép user xóa địa chỉ của chính user đó trong giao diện người dùng
         * @summary Hide User Address
         * @param {AddressControllerApiHideAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideAddress(requestParameters: AddressControllerApiHideAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.hideAddress(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này để khôi phục Address
         * @summary Restore Address
         * @param {AddressControllerApiRestore6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore6(requestParameters: AddressControllerApiRestore6Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAddressResponse> {
            return localVarFp.restore6(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API để update địa chỉ
         * @param {AddressControllerApiUpdate3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3(requestParameters: AddressControllerApiUpdate3Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAddressResponse> {
            return localVarFp.update3(requestParameters.id, requestParameters.addressRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create3 operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiCreate3Request
 */
export interface AddressControllerApiCreate3Request {
    /**
     * 
     * @type {AddressRequest}
     * @memberof AddressControllerApiCreate3
     */
    readonly addressRequest: AddressRequest
}

/**
 * Request parameters for delete12 operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiDelete12Request
 */
export interface AddressControllerApiDelete12Request {
    /**
     * 
     * @type {number}
     * @memberof AddressControllerApiDelete12
     */
    readonly id: number
}

/**
 * Request parameters for fetchAllForAdmin1 operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiFetchAllForAdmin1Request
 */
export interface AddressControllerApiFetchAllForAdmin1Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AddressControllerApiFetchAllForAdmin1
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AddressControllerApiFetchAllForAdmin1
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AddressControllerApiFetchAllForAdmin1
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for fetchById7 operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiFetchById7Request
 */
export interface AddressControllerApiFetchById7Request {
    /**
     * 
     * @type {number}
     * @memberof AddressControllerApiFetchById7
     */
    readonly id: number
}

/**
 * Request parameters for hideAddress operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiHideAddressRequest
 */
export interface AddressControllerApiHideAddressRequest {
    /**
     * 
     * @type {number}
     * @memberof AddressControllerApiHideAddress
     */
    readonly id: number
}

/**
 * Request parameters for restore6 operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiRestore6Request
 */
export interface AddressControllerApiRestore6Request {
    /**
     * 
     * @type {number}
     * @memberof AddressControllerApiRestore6
     */
    readonly id: number
}

/**
 * Request parameters for update3 operation in AddressControllerApi.
 * @export
 * @interface AddressControllerApiUpdate3Request
 */
export interface AddressControllerApiUpdate3Request {
    /**
     * 
     * @type {number}
     * @memberof AddressControllerApiUpdate3
     */
    readonly id: number

    /**
     * 
     * @type {AddressRequest}
     * @memberof AddressControllerApiUpdate3
     */
    readonly addressRequest: AddressRequest
}

/**
 * AddressControllerApi - object-oriented interface
 * @export
 * @class AddressControllerApi
 * @extends {BaseAPI}
 */
export class AddressControllerApi extends BaseAPI {
    /**
     * Api dùng để tạo địa chỉ mới
     * @summary Create New Address
     * @param {AddressControllerApiCreate3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public create3(requestParameters: AddressControllerApiCreate3Request, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).create3(requestParameters.addressRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API để Admin xóa mềm address
     * @summary Soft Delete Address
     * @param {AddressControllerApiDelete12Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public delete12(requestParameters: AddressControllerApiDelete12Request, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).delete12(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API này để lấy tất cả address bên trong hệ thống (page bắt đầu từ 0)
     * @summary Fetch All Addresses For Admin
     * @param {AddressControllerApiFetchAllForAdmin1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public fetchAllForAdmin1(requestParameters: AddressControllerApiFetchAllForAdmin1Request = {}, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).fetchAllForAdmin1(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddressControllerApiFetchById7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public fetchById7(requestParameters: AddressControllerApiFetchById7Request, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).fetchById7(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này cho phép user xóa địa chỉ của chính user đó trong giao diện người dùng
     * @summary Hide User Address
     * @param {AddressControllerApiHideAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public hideAddress(requestParameters: AddressControllerApiHideAddressRequest, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).hideAddress(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này để khôi phục Address
     * @summary Restore Address
     * @param {AddressControllerApiRestore6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public restore6(requestParameters: AddressControllerApiRestore6Request, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).restore6(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API để update địa chỉ
     * @param {AddressControllerApiUpdate3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public update3(requestParameters: AddressControllerApiUpdate3Request, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).update3(requestParameters.id, requestParameters.addressRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

