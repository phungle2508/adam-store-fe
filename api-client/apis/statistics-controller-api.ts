/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseListRevenueByMonthDTO } from '../models';
// @ts-ignore
import type { ApiResponseListTopSellingDTO } from '../models';
/**
 * StatisticsControllerApi - axios parameter creator
 * @export
 */
export const StatisticsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API này dùng để xuất dữ liệu doanh thu của các đơn hàng ra file Excel (yyyy-MM-dd)
         * @summary Export order revenue report to Excel
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportOrderRevenueToExcel: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('exportOrderRevenueToExcel', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('exportOrderRevenueToExcel', 'endDate', endDate)
            const localVarPath = `/v1/admin/statistics/orders/revenue-by-date/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API này dùng để ấy doanh thu theo tháng trong khoảng (startDate (yyyy-MM-dd) đến endDate (yyyy-MM-dd))
         * @summary Fetched monthly revenue data
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyRevenue: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getMonthlyRevenue', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getMonthlyRevenue', 'endDate', endDate)
            const localVarPath = `/v1/admin/statistics/revenues/monthly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API này dùng để lấy các sản phẩm bán chạy (yyyy-MM-dd)
         * @summary Fetched top selling products
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopSellingProducts: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getTopSellingProducts', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getTopSellingProducts', 'endDate', endDate)
            const localVarPath = `/v1/admin/statistics/products/top-selling`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsControllerApi - functional programming interface
 * @export
 */
export const StatisticsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * API này dùng để xuất dữ liệu doanh thu của các đơn hàng ra file Excel (yyyy-MM-dd)
         * @summary Export order revenue report to Excel
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportOrderRevenueToExcel(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportOrderRevenueToExcel(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsControllerApi.exportOrderRevenueToExcel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API này dùng để ấy doanh thu theo tháng trong khoảng (startDate (yyyy-MM-dd) đến endDate (yyyy-MM-dd))
         * @summary Fetched monthly revenue data
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonthlyRevenue(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListRevenueByMonthDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthlyRevenue(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsControllerApi.getMonthlyRevenue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API này dùng để lấy các sản phẩm bán chạy (yyyy-MM-dd)
         * @summary Fetched top selling products
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopSellingProducts(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListTopSellingDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopSellingProducts(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsControllerApi.getTopSellingProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatisticsControllerApi - factory interface
 * @export
 */
export const StatisticsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsControllerApiFp(configuration)
    return {
        /**
         * API này dùng để xuất dữ liệu doanh thu của các đơn hàng ra file Excel (yyyy-MM-dd)
         * @summary Export order revenue report to Excel
         * @param {StatisticsControllerApiExportOrderRevenueToExcelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportOrderRevenueToExcel(requestParameters: StatisticsControllerApiExportOrderRevenueToExcelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportOrderRevenueToExcel(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * API này dùng để ấy doanh thu theo tháng trong khoảng (startDate (yyyy-MM-dd) đến endDate (yyyy-MM-dd))
         * @summary Fetched monthly revenue data
         * @param {StatisticsControllerApiGetMonthlyRevenueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyRevenue(requestParameters: StatisticsControllerApiGetMonthlyRevenueRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListRevenueByMonthDTO> {
            return localVarFp.getMonthlyRevenue(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * API này dùng để lấy các sản phẩm bán chạy (yyyy-MM-dd)
         * @summary Fetched top selling products
         * @param {StatisticsControllerApiGetTopSellingProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopSellingProducts(requestParameters: StatisticsControllerApiGetTopSellingProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListTopSellingDTO> {
            return localVarFp.getTopSellingProducts(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for exportOrderRevenueToExcel operation in StatisticsControllerApi.
 * @export
 * @interface StatisticsControllerApiExportOrderRevenueToExcelRequest
 */
export interface StatisticsControllerApiExportOrderRevenueToExcelRequest {
    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiExportOrderRevenueToExcel
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiExportOrderRevenueToExcel
     */
    readonly endDate: string
}

/**
 * Request parameters for getMonthlyRevenue operation in StatisticsControllerApi.
 * @export
 * @interface StatisticsControllerApiGetMonthlyRevenueRequest
 */
export interface StatisticsControllerApiGetMonthlyRevenueRequest {
    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiGetMonthlyRevenue
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiGetMonthlyRevenue
     */
    readonly endDate: string
}

/**
 * Request parameters for getTopSellingProducts operation in StatisticsControllerApi.
 * @export
 * @interface StatisticsControllerApiGetTopSellingProductsRequest
 */
export interface StatisticsControllerApiGetTopSellingProductsRequest {
    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiGetTopSellingProducts
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiGetTopSellingProducts
     */
    readonly endDate: string
}

/**
 * StatisticsControllerApi - object-oriented interface
 * @export
 * @class StatisticsControllerApi
 * @extends {BaseAPI}
 */
export class StatisticsControllerApi extends BaseAPI {
    /**
     * API này dùng để xuất dữ liệu doanh thu của các đơn hàng ra file Excel (yyyy-MM-dd)
     * @summary Export order revenue report to Excel
     * @param {StatisticsControllerApiExportOrderRevenueToExcelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApi
     */
    public exportOrderRevenueToExcel(requestParameters: StatisticsControllerApiExportOrderRevenueToExcelRequest, options?: RawAxiosRequestConfig) {
        return StatisticsControllerApiFp(this.configuration).exportOrderRevenueToExcel(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API này dùng để ấy doanh thu theo tháng trong khoảng (startDate (yyyy-MM-dd) đến endDate (yyyy-MM-dd))
     * @summary Fetched monthly revenue data
     * @param {StatisticsControllerApiGetMonthlyRevenueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApi
     */
    public getMonthlyRevenue(requestParameters: StatisticsControllerApiGetMonthlyRevenueRequest, options?: RawAxiosRequestConfig) {
        return StatisticsControllerApiFp(this.configuration).getMonthlyRevenue(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API này dùng để lấy các sản phẩm bán chạy (yyyy-MM-dd)
     * @summary Fetched top selling products
     * @param {StatisticsControllerApiGetTopSellingProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApi
     */
    public getTopSellingProducts(requestParameters: StatisticsControllerApiGetTopSellingProductsRequest, options?: RawAxiosRequestConfig) {
        return StatisticsControllerApiFp(this.configuration).getTopSellingProducts(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }
}

