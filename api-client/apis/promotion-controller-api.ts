/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponsePageResponsePromotionResponse } from '../models';
// @ts-ignore
import type { ApiResponsePromotionResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { PromotionRequest } from '../models';
// @ts-ignore
import type { PromotionUpdateRequest } from '../models';
/**
 * PromotionControllerApi - axios parameter creator
 * @export
 */
export const PromotionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PromotionRequest} promotionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create5: async (promotionRequest: PromotionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionRequest' is not null or undefined
            assertParamExists('create5', 'promotionRequest', promotionRequest)
            const localVarPath = `/v1/admin/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promotionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete Promotion
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete3', 'id', id)
            const localVarPath = `/v1/admin/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch All Promotions For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll9: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById4: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchById4', 'id', id)
            const localVarPath = `/v1/private/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api này để khôi phục Promotion
         * @summary Restore Promotion
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restore1', 'id', id)
            const localVarPath = `/v1/admin/promotions/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PromotionUpdateRequest} promotionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4: async (id: number, promotionUpdateRequest: PromotionUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update4', 'id', id)
            // verify required parameter 'promotionUpdateRequest' is not null or undefined
            assertParamExists('update4', 'promotionUpdateRequest', promotionUpdateRequest)
            const localVarPath = `/v1/admin/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promotionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionControllerApi - functional programming interface
 * @export
 */
export const PromotionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PromotionRequest} promotionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create5(promotionRequest: PromotionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create5(promotionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionControllerApi.create5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft delete Promotion
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionControllerApi.delete3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch All Promotions For Admin
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll9(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll9(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionControllerApi.fetchAll9']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchById4(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchById4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionControllerApi.fetchById4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Api này để khôi phục Promotion
         * @summary Restore Promotion
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restore1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restore1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionControllerApi.restore1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PromotionUpdateRequest} promotionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(id: number, promotionUpdateRequest: PromotionUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update4(id, promotionUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionControllerApi.update4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromotionControllerApi - factory interface
 * @export
 */
export const PromotionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {PromotionControllerApiCreate5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create5(requestParameters: PromotionControllerApiCreate5Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePromotionResponse> {
            return localVarFp.create5(requestParameters.promotionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete Promotion
         * @param {PromotionControllerApiDelete3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3(requestParameters: PromotionControllerApiDelete3Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.delete3(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch All Promotions For Admin
         * @param {PromotionControllerApiFetchAll9Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll9(requestParameters: PromotionControllerApiFetchAll9Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageResponsePromotionResponse> {
            return localVarFp.fetchAll9(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionControllerApiFetchById4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById4(requestParameters: PromotionControllerApiFetchById4Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePromotionResponse> {
            return localVarFp.fetchById4(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Api này để khôi phục Promotion
         * @summary Restore Promotion
         * @param {PromotionControllerApiRestore1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore1(requestParameters: PromotionControllerApiRestore1Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePromotionResponse> {
            return localVarFp.restore1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionControllerApiUpdate4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4(requestParameters: PromotionControllerApiUpdate4Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePromotionResponse> {
            return localVarFp.update4(requestParameters.id, requestParameters.promotionUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create5 operation in PromotionControllerApi.
 * @export
 * @interface PromotionControllerApiCreate5Request
 */
export interface PromotionControllerApiCreate5Request {
    /**
     * 
     * @type {PromotionRequest}
     * @memberof PromotionControllerApiCreate5
     */
    readonly promotionRequest: PromotionRequest
}

/**
 * Request parameters for delete3 operation in PromotionControllerApi.
 * @export
 * @interface PromotionControllerApiDelete3Request
 */
export interface PromotionControllerApiDelete3Request {
    /**
     * 
     * @type {number}
     * @memberof PromotionControllerApiDelete3
     */
    readonly id: number
}

/**
 * Request parameters for fetchAll9 operation in PromotionControllerApi.
 * @export
 * @interface PromotionControllerApiFetchAll9Request
 */
export interface PromotionControllerApiFetchAll9Request {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof PromotionControllerApiFetchAll9
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof PromotionControllerApiFetchAll9
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PromotionControllerApiFetchAll9
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for fetchById4 operation in PromotionControllerApi.
 * @export
 * @interface PromotionControllerApiFetchById4Request
 */
export interface PromotionControllerApiFetchById4Request {
    /**
     * 
     * @type {number}
     * @memberof PromotionControllerApiFetchById4
     */
    readonly id: number
}

/**
 * Request parameters for restore1 operation in PromotionControllerApi.
 * @export
 * @interface PromotionControllerApiRestore1Request
 */
export interface PromotionControllerApiRestore1Request {
    /**
     * 
     * @type {number}
     * @memberof PromotionControllerApiRestore1
     */
    readonly id: number
}

/**
 * Request parameters for update4 operation in PromotionControllerApi.
 * @export
 * @interface PromotionControllerApiUpdate4Request
 */
export interface PromotionControllerApiUpdate4Request {
    /**
     * 
     * @type {number}
     * @memberof PromotionControllerApiUpdate4
     */
    readonly id: number

    /**
     * 
     * @type {PromotionUpdateRequest}
     * @memberof PromotionControllerApiUpdate4
     */
    readonly promotionUpdateRequest: PromotionUpdateRequest
}

/**
 * PromotionControllerApi - object-oriented interface
 * @export
 * @class PromotionControllerApi
 * @extends {BaseAPI}
 */
export class PromotionControllerApi extends BaseAPI {
    /**
     * 
     * @param {PromotionControllerApiCreate5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionControllerApi
     */
    public create5(requestParameters: PromotionControllerApiCreate5Request, options?: RawAxiosRequestConfig) {
        return PromotionControllerApiFp(this.configuration).create5(requestParameters.promotionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete Promotion
     * @param {PromotionControllerApiDelete3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionControllerApi
     */
    public delete3(requestParameters: PromotionControllerApiDelete3Request, options?: RawAxiosRequestConfig) {
        return PromotionControllerApiFp(this.configuration).delete3(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch All Promotions For Admin
     * @param {PromotionControllerApiFetchAll9Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionControllerApi
     */
    public fetchAll9(requestParameters: PromotionControllerApiFetchAll9Request = {}, options?: RawAxiosRequestConfig) {
        return PromotionControllerApiFp(this.configuration).fetchAll9(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionControllerApiFetchById4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionControllerApi
     */
    public fetchById4(requestParameters: PromotionControllerApiFetchById4Request, options?: RawAxiosRequestConfig) {
        return PromotionControllerApiFp(this.configuration).fetchById4(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api này để khôi phục Promotion
     * @summary Restore Promotion
     * @param {PromotionControllerApiRestore1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionControllerApi
     */
    public restore1(requestParameters: PromotionControllerApiRestore1Request, options?: RawAxiosRequestConfig) {
        return PromotionControllerApiFp(this.configuration).restore1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionControllerApiUpdate4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionControllerApi
     */
    public update4(requestParameters: PromotionControllerApiUpdate4Request, options?: RawAxiosRequestConfig) {
        return PromotionControllerApiFp(this.configuration).update4(requestParameters.id, requestParameters.promotionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

